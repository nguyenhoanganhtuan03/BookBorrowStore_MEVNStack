import createApiClient from "./api.service.js";

class BookService {
    constructor(baseUrl = "/api/books") {
        this.api = createApiClient(baseUrl);
    }

    async addBook(bookData) {
        try {
            const data = (await this.api.post("/add", bookData)).data;
            return {
                status: "success",
                message: data.message || "Added Book successfully",
                data: data.data,
            };
        } catch (err) {
            return {
                status: "error",
                message: err.response?.data?.message || "Add failed",
            };
        }
    }

    async getBooks() {
        try {
            const response = await this.api.get("/");
            console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API:", response.data);

            return {
                status: "success",
                message: response.data.message || "Books retrieved successfully",
                data: response.data || [],
            };
        } catch (err) {
            console.error("L·ªói khi g·ªçi API:", err);
            return {
                status: "error",
                message: err.response?.data?.message || "Failed to fetch books",
                data: [],
            };
        }
    }

    async getBookById(id) {
        try {
            console.log("üîé ƒêang t√¨m ki·∫øm s√°ch v·ªõi ID:", id);
            const response = await this.api.get(`/${id}`);
            console.log("üìö K·∫øt qu·∫£ API:", response.data);

            // Ki·ªÉm tra n·∫øu response.data h·ª£p l·ªá
            if (response.data && response.data._id) {
                return {
                    status: "success",
                    message: response.data.message || "Book found successfully",
                    data: response.data, // ‚úÖ Tr·∫£ v·ªÅ tr·ª±c ti·∫øp d·ªØ li·ªáu s√°ch
                };
            } else {
                return {
                    status: "error",
                    message: "Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID n√†y",
                    data: [],
                };
            }
        } catch (err) {
            console.error("‚ùå L·ªói API:", err);
            return {
                status: "error",
                message: err.response?.data?.message || "L·ªói khi g·ªçi API",
                data: [],
            };
        }
    }

    async getBookByName(bookname) {
        try {
            console.log("üîé ƒêang t√¨m ki·∫øm s√°ch:", bookname);
            const response = await this.api.get(`/search/${bookname}`);
            console.log("üìö K·∫øt qu·∫£ API:", response.data);

            // Ki·ªÉm tra n·∫øu response tr·∫£ v·ªÅ m·∫£ng h·ª£p l·ªá
            if (response.data && Array.isArray(response.data) && response.data.length > 0) {
                return {
                    status: "success",
                    message: "T√¨m th·∫•y s√°ch",
                    data: response.data, // ‚úÖ D·ªØ li·ªáu h·ª£p l·ªá
                };
            } else {
                return {
                    status: "error",
                    message: "Kh√¥ng t√¨m th·∫•y s√°ch n√†o",
                    data: [],
                };
            }
        } catch (err) {
            console.error("‚ùå L·ªói API:", err);
            return {
                status: "error",
                message: err.response?.data?.message || "L·ªói khi g·ªçi API",
                data: [],
            };
        }
    }

    async updateBook(id, bookData) {
        try {
            const data = (await this.api.put(`/${id}`, bookData)).data;
            return {
                status: "success",
                message: data.message || "Book updated successfully",
                data: data.data,
            };
        } catch (err) {
            return {
                status: "error",
                message: err.response?.data?.message || "Failed to update book",
            };
        }
    }

    async deleteBook(id) {
        try {
            const data = (await this.api.delete(`/${id}`)).data;
            return {
                status: "success",
                message: data.message || "Book deleted successfully",
            };
        } catch (err) {
            return {
                status: "error",
                message: err.response?.data?.message || "Failed to delete book",
            };
        }
    }
}

export default new BookService();